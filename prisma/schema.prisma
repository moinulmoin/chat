// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chats Chat[]

  emailVerified Boolean
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Chat {
  id           String   @id @default(cuid())
  userId       String
  parentChatId String?
  title        String?
  publicId     String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  streams     Stream[]
  messages    Message[]
  attachments Attachment[]

  @@index([userId])
  @@map("chats")
}

model Stream {
  id     String @id @default(cuid())
  chatId String

  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@map("streams")
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  role      String
  content   String?
  parts     Json?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chat        Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  @@index([chatId])
  @@index([chatId, createdAt])
  @@map("messages")
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String
  chatId    String
  storageId String
  fileName  String
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([chatId])
  @@map("attachments")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
